#!/usr/bin/env python3
"""apcupsd  -  utility for interacting with APC UPS

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "apcupsd"
__version__ = "v0.0.1"
__maintainer__ = "RueiKe"
__status__ = "Development"

import argparse
import re
import subprocess
import os
import sys
import time
from config import ups_IP, snmp_community


class ApcUpsSnmp:
    def __init__(self):
        self.mib_commands = {'mib_ups_type': ['iso.3.6.1.4.1.318.1.1.1.1.1.1.0',
                                              'General UPS Information'],
                             'mib_battery_capacity': ['iso.3.6.1.4.1.318.1.1.1.2.2.1.0',
                                                      'Percentage of Total Capacity'],
                             'mib_battery_temperature': ['iso.3.6.1.4.1.318.1.1.1.2.2.2.0',
                                                         'Battery Temperature in C'],
                             'mib_battery_runtime_remain': ['iso.3.6.1.4.1.318.1.1.1.2.2.3.0',
                                                            'Runtime Remaining'],
                             'mib_battery_replace ': ['iso.3.6.1.4.1.318.1.1.1.2.2.4.0',
                                                      '2 = replace, 1 = ok'],
                             'mib_input_voltage': ['iso.3.6.1.4.1.318.1.1.1.3.2.1.0',
                                                   'Input Voltage'],
                             'mib_input_frequency': ['iso.3.6.1.4.1.318.1.1.1.3.2.4.0',
                                                     'Input Frequency Hz'],
                             'mib_reason_for_last_transfer': ['iso.3.6.1.4.1.318.1.1.1.3.2.5.0',
                                                              ('1=No events, 2=High line voltage, 3=Brownout, ' +
                                                               '4=Loss of mains power, 5=Small temporary power drop, ' +
                                                               '6=Large temporary power drop, 7=Small spike, ' +
                                                               '8=Large spike, 9=UPS self test, ' +
                                                               '10=Excessive input voltage fluctuation')],
                             'mib_output_voltage': ['iso.3.6.1.4.1.318.1.1.1.4.2.1.0',
                                                    'Output Voltage'],
                             'mib_output_frequency': ['iso.3.6.1.4.1.318.1.1.1.4.2.2.0',
                                                      'Output Frequency Hz'],
                             'mib_output_load': ['iso.3.6.1.4.1.318.1.1.1.4.2.3.0',
                                                 'Output load as % of capacity'],
                             'mib_output_current': ['iso.3.6.1.4.1.318.1.1.1.4.2.4.0',
                                                    'Output current in Amps'],
                             'mib_comms': ['iso.3.6.1.4.1.318.1.1.1.8.1.0',
                                           'Communicating with UPS Device 1 = yes, 2 = no'],
                             'mib_last_self_test_result': ['iso.3.6.1.4.1.318.1.1.1.7.2.3.0',
                                                           'Last Self Test Results'],
                             'mib_last_self_test_date': ['iso.3.6.1.4.1.318.1.1.1.7.2.4.0',
                                                         'Date of Last Self Test']}

    def send_snmp_command(self, command_name):
        pass

    def list_snmp_commands(self):
        for k, v in self.mib_commands.items():
            print('{}: Value: {}'.format(k, v[0]))
            print('Description: {}'.format(v[1]))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--daemon", help="Run in daemon mode", action="store_true", default=False)
    parser.add_argument("--list", help="List all available commands", action="store_true", default=False)
    parser.add_argument("--logfile", help="Specify logfile", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    # About me
    if args.about:
        print(__doc__)
        print("Author: ", __author__)
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    aps = ApcUpsSnmp()
    aps.list_snmp_commands()


if __name__ == "__main__":
    main()
