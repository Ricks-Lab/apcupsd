#!/usr/bin/env python3
"""apcupsd  -  utility for interacting with APC UPS

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "apcupsd"
__version__ = "v0.0.1"
__maintainer__ = "RueiKe"
__status__ = "Development"

import argparse
import subprocess
import shlex
import sys
import time
import shutil
import re
import os
import signal
from datetime import datetime
from UPSmodules import UPSmodule


quit_signal = False


def signal_handler(sig, frame):
    global quit_signal
    quit_signal = True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--daemon", help="Run in daemon mode", action="store_true", default=False)
    parser.add_argument("--list", help="List all available commands", action="store_true", default=False)
    parser.add_argument("--logfile", help="Specify logfile", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    signal.signal(signal.SIGINT, signal_handler)
    global quit_signal

    # About me
    if args.about:
        print(__doc__)
        print("Author: ", __author__)
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    aps = UPSmodule.ApcUpsSnmp()
    if args.list:
        aps.list_snmp_commands()

    # Display current status of target UPS
    for k, v in aps.mib_commands.items():
        aps.send_snmp_command(k, display=True)

    if args.daemon:
        suspend_state = False
        while True:
            time_str = datetime.now().strftime('%c')
            bat_status = aps.send_snmp_command('mib_battery_status')
            bat_load = aps.send_snmp_command('mib_output_load')
            time_on_bat = aps.send_snmp_command('mib_time_on_battery')[0]
            remain_run_time = aps.send_snmp_command('mib_battery_runtime_remain')[0]

            if quit_signal:
                print('{}: Received Quit Signal'.format(time_str))
                sys.exit(0)

            if time_on_bat == 0.0:
                print('{}: Battery Status: {}: Load: {}'.format(time_str, bat_status, bat_load))
            if time_on_bat > 0:
                print('{}: On UPS Power: {}'.format(time_str, time_on_bat))
                print('{}: UPS Runtime Remaining: {}'.format(time_str, remain_run_time))

            if bat_status == 'Battery Low':
                print('{}: Battery Low'.format(time_str))
                # Call shutdown script
                pass

            if suspend_state:
                if time_on_bat < aps.suspend_threshold:
                    # Resume
                    print('{}: Resuming'.format(time_str))
                    aps.resume()
                    suspend_state = False
                    pass

            if not suspend_state:
                if time_on_bat > aps.suspend_threshold:
                    # Suspend
                    print('{}: Suspending'.format(time_str))
                    aps.suspend()
                    suspend_state = True
                    pass

            for sleep_index in range(1, aps.read_interval):
                time.sleep(1)
                if quit_signal:
                    print('{}: Received Quit Signal'.format(time_str))
                    sys.exit(0)


if __name__ == "__main__":
    main()
