#!/usr/bin/env python3
"""ups-daemon  -  utility for interacting with APC UPS

    With no options specified, the utility will give the current status of the UPS configured in the config.py file.
    With the *--daemon* option, *ups-daemon* will continuously check the status of the UPS.  When it detects that
    the UPS is sourcing powering from the battery, it will check the amount of time it has been running on battery
    and run the specified suspend script when the specified threshold is exceeded.  It will execute the specified
    resume script when it detects power has resumed.  When the utility detects a Battery Low event from the UPS or
    that time remaining for battery or the battery charge is below specified thresholds, then the shutdown script
    will be executed. With the *--list* option, the utility will list all available SNMP commands for the configured
    UPS.  The *--logfile filename* option is used to specify a logfile, but is not implemented at this time.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "ups-daemon"
__version__ = "v0.0.2"
__maintainer__ = "RueiKe"
__status__ = "Development"

import argparse
import sys
import time
import signal
from datetime import datetime
from UPSmodules import UPSmodule as UPS
from UPSmodules import env


quit_signal = False


def signal_handler(sig, frame):
    global quit_signal
    quit_signal = True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--daemon", help="Run in daemon mode", action="store_true", default=False)
    parser.add_argument("--list", help="List all available commands", action="store_true", default=False)
    parser.add_argument("--logfile", help="Specify logfile", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    signal.signal(signal.SIGINT, signal_handler)
    global quit_signal

    # About me
    if args.about:
        print(__doc__)
        print("Author: ", __author__)
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    if env.ut_const.check_env() < 0:
        print('Error in environment. Exiting...')
        sys.exit(-1)

    ups = UPS.UPSsnmp()
    #ups.read_ups_list()
    #ups.check_ups_list()
    ups.set_daemon_parameters()
    if not ups.check_ups_type(ups.active_ups['ups_type']):
        print('Invalid UPS type: {}, Valid entries: '.format(ups.active_ups['ups_type']), ups.list_valid_ups_types())
        sys.exit(-1)

    if args.list:
        ups.list_snmp_commands()
        sys.exit(0)

    # Display current status of target UPS
    for k, v in ups.mib_commands(ups.active_ups).items():
        ups.send_snmp_command(k, display=True)

    if args.daemon:
        suspend_state = False
        while True:
            time_str = datetime.now().strftime('%c')
            bat_status = ups.send_snmp_command('mib_battery_status')
            bat_load = ups.send_snmp_command('mib_output_load')
            bat_capacity = int(ups.send_snmp_command('mib_battery_capacity'))
            time_on_bat = ups.send_snmp_command('mib_time_on_battery')[0]
            remain_run_time = ups.send_snmp_command('mib_battery_runtime_remain')[0]

            if quit_signal:
                print('{}: Received Quit Signal'.format(time_str))
                sys.exit(0)

            if time_on_bat == 0.0:
                print('{}: Battery Status: {}: Load: {}%'.format(time_str, bat_status, bat_load))
            if time_on_bat > 0:
                print('{}: On UPS Power: {:.3f} min'.format(time_str, time_on_bat))
                print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))

            if time_on_bat > 0.0:
                if bat_status == 'Battery Low':
                    # Call shutdown script
                    print('{}: Battery Low Signal'.format(time_str))
                    print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                    print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                    print('{}: Calling Shutdown Script'.format(time_str))
                    ups.shutdown()
                if bat_capacity < 80 or remain_run_time < 5:
                    # Call shutdown script
                    print('{}: Battery Nearly Exhausted'.format(time_str))
                    print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                    print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                    print('{}: Calling Shutdown Script'.format(time_str))
                    ups.shutdown()

            if bat_capacity < 10 or remain_run_time < 5:
                print('{}: Battery Nearly Exhausted'.format(time_str))
                print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                print('{}: UPS Battery Charging'.format(time_str))

            if suspend_state:
                if time_on_bat < ups.daemon_params['suspend_threshold']:
                    # Resume
                    print('{}: Resuming'.format(time_str))
                    ups.resume()
                    suspend_state = False
                    pass

            if not suspend_state:
                if time_on_bat > ups.daemon_params['suspend_threshold']:
                    # Suspend
                    print('{}: Suspending'.format(time_str))
                    ups.suspend()
                    suspend_state = True
                    pass

            for sleep_index in range(1, ups.daemon_params['read_interval']):
                time.sleep(1)
                if quit_signal:
                    print('{}: Received Quit Signal'.format(time_str))
                    sys.exit(0)


if __name__ == "__main__":
    main()
