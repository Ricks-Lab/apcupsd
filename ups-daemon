#!/usr/bin/env python3
"""ups-daemon  -  utility for interacting with compatible UPSs with network management cards

    With no options specified, the utility will give the current status of the UPS configured with *daemon = true*
    in the config.json file. With the *--daemon* option, *ups-daemon* will continuously check the status of the
    UPS.  When it detects that the UPS is sourcing powering from the battery, it will check the amount of time it
    has been running on battery and run the specified suspend script when the specified threshold is exceeded.  It
    will execute the specified resume script when it detects power has resumed.  When the utility detects a Battery
    Low event from the UPS or that time remaining for battery or the battery charge is below specified thresholds,
    then the shutdown script will be executed. With the *--list* option, the utility will list all available SNMP
    commands for the configured UPS.  The *--logfile filename* option is used to specify a logfile, but is not
    implemented at this time.  The threshold and script definitions must be made in the config.py file using
    config.py.template as a template.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "ups-daemon"
__version__ = "v0.9.0"
__maintainer__ = "RueiKe"
__status__ = "Beta Release"

import argparse
import sys
import time
import signal
from datetime import datetime
from UPSmodules import UPSmodule as UPS
from UPSmodules import env


quit_signal = False


def signal_handler(sig, frame):
    global quit_signal
    quit_signal = True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--daemon", help="Run in daemon mode", action="store_true", default=False)
    parser.add_argument("--list_commands", help="List all available commands", action="store_true", default=False)
    parser.add_argument("--list_params", help="List all configuration parameters", action="store_true", default=False)
    parser.add_argument("--logfile", help="Specify logfile", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    signal.signal(signal.SIGINT, signal_handler)
    global quit_signal

    # About me
    if args.about:
        print(__doc__)
        print("Author: ", __author__)
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    if env.ut_const.check_env() < 0:
        print('Error in environment. Exiting...')
        sys.exit(-1)

    ups = UPS.UPSsnmp()
    ups.set_daemon_parameters()
    if not ups.check_ups_type(ups.active_ups['ups_type']):
        print('Invalid UPS type: {}, Valid entries: '.format(ups.active_ups['ups_type']), ups.list_valid_ups_types())
        sys.exit(-1)

    if args.list_params:
        ups.print_daemon_parameters()
        sys.exit(0)

    if args.list_commands:
        ups.print_snmp_commands()
        sys.exit(0)

    # Display current status of target UPS
    for k, v in ups.get_mib_commands().items():
        ups.send_snmp_command(k, display=True)

    if args.daemon:
        crit_bat_level = ups.daemon_params['threshold_battery_capacity_crit']
        warn_bat_level = ups.daemon_params['threshold_battery_capacity_warn']
        crit_load_level = ups.daemon_params['threshold_battery_load_crit']
        warn_load_level = ups.daemon_params['threshold_battery_load_warn']
        crit_runtime_rem = ups.daemon_params['threshold_battery_time_rem_crit']
        warn_runtime_rem = ups.daemon_params['threshold_battery_time_rem_warn']
        overload_fault = False
        suspend_state = False
        normal_sleep = ups.daemon_params['read_interval']
        fault_sleep = env.ut_const.READ_INTERVAL_LIMIT
        active_sleep = normal_sleep
        while True:
            time_str = datetime.now().strftime('%c')
            bat_status = ups.send_snmp_command('mib_battery_status')
            bat_load = int(ups.send_snmp_command('mib_output_load'))
            bat_capacity = int(ups.send_snmp_command('mib_battery_capacity'))
            time_on_bat = ups.send_snmp_command('mib_time_on_battery')[0]
            remain_run_time = ups.send_snmp_command('mib_battery_runtime_remain')[0]

            if quit_signal:
                print('{}: Received Quit Signal'.format(time_str))
                sys.exit(0)

            # Check for load alarms
            if bat_load > crit_load_level:
                print('{}: Battery Load Critical: {}%'.format(time_str, bat_load))
                print('{}: Overload Fault, Suspend will execute with no resume possible.'.format(time_str))
                overload_fault = True
            elif bat_load > warn_load_level:
                print('{}: Battery Load High: {}%'.format(time_str, bat_load))

            # Not on Battery
            if time_on_bat == 0.0:
                if active_sleep != normal_sleep:
                    print('{}:WARNING condition has ended: increase update interval from {} to {}'.format(
                          time_str, active_sleep, normal_sleep))
                    active_sleep = normal_sleep
                print('{}: Battery Status: {}: Load: {}%'.format(time_str, bat_status, bat_load))
                if bat_capacity < crit_bat_level:
                    print('{}: Battery Nearly Exhausted'.format(time_str))
                    print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                    print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                    print('{}: UPS Battery Charging'.format(time_str))
                elif bat_capacity < warn_bat_level:
                    print('{}: Battery Level Low'.format(time_str))
                    print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                    print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                    print('{}: UPS Battery Charging'.format(time_str))
            # On Battery condition
            elif time_on_bat > 0.0:
                if active_sleep != fault_sleep:
                    if remain_run_time < warn_runtime_rem:
                        # Warning Condition
                        print('{}:WARNING runtime below {}: reduce update interval from {} to {}'.format(
                              time_str, warn_runtime_rem, normal_sleep, active_sleep))
                        active_sleep = fault_sleep
                    if bat_capacity < warn_bat_level:
                        # Warning Condition
                        print('{}:WARNING battery capacity below {}: reduce update interval from {} to {}'.format(
                            time_str, warn_bat_level, normal_sleep, active_sleep))
                        active_sleep = fault_sleep
                print('{}: On UPS Power: {:.3f} min'.format(time_str, time_on_bat))
                print('{}: UPS Runtime Remaining: {:.3f} min'.format(time_str, remain_run_time))
                print('{}: UPS Battery Capacity Remaining: {}%'.format(time_str, bat_capacity))
                if bat_status == 'Battery Low':
                    # Call shutdown script
                    print('{}: Battery Low Signal'.format(time_str))
                    print('{}: Calling Shutdown Script'.format(time_str))
                    ups.shutdown()
                if bat_capacity < crit_bat_level or remain_run_time < crit_runtime_rem:
                    # Call shutdown script
                    print('{}: Battery Nearly Exhausted'.format(time_str))
                    print('{}: Calling Shutdown Script'.format(time_str))
                    ups.shutdown()

            if suspend_state:
                if time_on_bat < ups.daemon_params['threshold_time_on_battery_crit'] and not overload_fault:
                    # Resume
                    print('{}: Resuming'.format(time_str))
                    ups.resume()
                    suspend_state = False
                    pass

            if not suspend_state:
                if time_on_bat > ups.daemon_params['threshold_time_on_battery_crit'] or bat_load > crit_load_level:
                    # Suspend
                    print('{}: Suspending'.format(time_str))
                    ups.suspend()
                    suspend_state = True
                    pass

            for sleep_index in range(0, active_sleep):
                time.sleep(1)
                if quit_signal:
                    print('{}: Received Quit Signal'.format(time_str))
                    sys.exit(0)


if __name__ == "__main__":
    main()
