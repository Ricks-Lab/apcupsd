#!/usr/bin/env python3
""" ups-ls  -  Displays details about installed compatible UPSs

    This utility displays most relevant parameters for installed and compatible UPSs
    listed in the config.json file.  By default, all available parameters are displayed.
    The --input and --output options can be used to get relevant UPS input and output
    parameters.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = 'RueiKe'
__copyright__ = 'Copyright (C) 2019 RueiKe'
__credits__ = []
__license__ = 'GNU General Public License'
__program_name__ = 'ups-ls'
__version__ = 'v0.0.2'
__maintainer__ = 'RueiKe'
__status__ = 'Development'

import argparse
import sys
from UPSmodules import UPSmodule as UPS
from UPSmodules import env


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--about', help='README',
                        action='store_true', default=False)
    parser.add_argument('--input', help='Display UPS input parameters',
                        action='store_true', default=False)
    parser.add_argument('--output', help='Display UPS output parameters',
                        action='store_true', default=False)
    parser.add_argument('-d', '--debug', help='Debug output',
                        action='store_true', default=False)
    args = parser.parse_args()

    # About me
    if args.about:
        print(__doc__)
        print('Author: ', __author__)
        print('Copyright: ', __copyright__)
        print('Credits: ', __credits__)
        print('License: ', __license__)
        print('Version: ', __version__)
        print('Maintainer: ', __maintainer__)
        print('Status: ', __status__)
        sys.exit(0)

    env.ut_const.DEBUG = args.debug

    if env.ut_const.check_env() < 0:
        print('Error in environment. Exiting...')
        sys.exit(-1)

    ups = UPS.UPSsnmp()
    num_ups = ups.num_ups()

    if num_ups == 0:
        print('No UPSs specified in config.json, exiting...')
        sys.exit(-1)
    print(f'{num_ups} UPSs found in config.json file.')

    for k, v in ups.ups_list.items():
        ups.set_active_ups(v)
        print('UPS Name: {}'.format(ups.active_ups_name()))
        print('UPS IP: {}'.format(ups.active_ups_ip()))
        if args.input or args.output:
            if args.input:
                for oc in ups.input_mib_cmds:
                    ups.send_snmp_command(oc, display=True)
            if args.output:
                for oc in ups.output_mib_cmds:
                    ups.send_snmp_command(oc, display=True)
        else:
            for k2, v2 in ups.mib_commands(ups.active_ups).items():
                ups.send_snmp_command(k2, display=True)
        print('')

    sys.exit(0)


if __name__ == '__main__':
    main()
